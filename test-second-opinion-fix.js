/**
 * Quick test for Second Opinion fix
 * Tests that content is properly returned from Ollama
 */

import { secondOpinionService } from './src/lib/modules/chat/services/SecondOpinionService.js';
import { prisma } from './src/lib/database/client.js';

async function testSecondOpinion() {
  console.log('üß™ Testing Second Opinion Fix...\n');

  try {
    // 1. Find a test user
    const user = await prisma.user.findFirst({
      where: { type: 'admin' }
    });

    if (!user) {
      console.error('‚ùå No admin user found');
      return;
    }

    console.log('‚úÖ Found user:', user.email);

    // 2. Find a test session with messages
    const session = await prisma.session.findFirst({
      where: {
        userId: user.id,
        messages: {
          some: {
            type: 'assistant'
          }
        }
      },
      include: {
        messages: {
          where: { type: 'assistant' },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    if (!session || !session.messages.length) {
      console.error('‚ùå No session with assistant messages found');
      return;
    }

    console.log('‚úÖ Found session:', session.id);

    const message = session.messages[0];
    console.log('‚úÖ Found message:', {
      id: message.id,
      contentPreview: message.content.substring(0, 50) + '...'
    });

    // 3. Request second opinion
    console.log('\nüìù Requesting second opinion from Ollama...');

    const result = await secondOpinionService.requestSecondOpinion(message.id, session.id, {
      userId: user.id,
      provider: 'ollama',
      model: 'qwen2.5:1.5b',
      language: 'en'
    });

    console.log('\n‚úÖ Second opinion generated!');
    console.log('üìä Result:', {
      success: result.success,
      opinionId: result.data.opinionId,
      messageId: result.data.messageId,
      provider: result.data.provider,
      model: result.data.model,
      contentLength: result.data.content?.length || 0,
      hasContent: !!result.data.content,
      contentPreview: result.data.content
        ? result.data.content.substring(0, 100) + '...'
        : 'NO CONTENT',
      divergence: result.data.divergence
        ? {
            level: result.data.divergence.level,
            differencesCount: result.data.divergence.differences?.length || 0
          }
        : null
    });

    // 4. Verify content is not empty
    if (!result.data.content || result.data.content.trim() === '') {
      console.error('\n‚ùå FAILED: Content is empty!');
      console.error('Full result:', JSON.stringify(result, null, 2));
      process.exit(1);
    }

    console.log('\n‚úÖ SUCCESS: Content is present and not empty!');
    console.log('Content length:', result.data.content.length, 'characters');

    // 5. Verify it's stored in database
    const storedOpinion = await prisma.secondOpinion.findUnique({
      where: { id: result.data.opinionId },
      include: { opinionMessage: true }
    });

    if (!storedOpinion) {
      console.error('\n‚ùå FAILED: Opinion not found in database!');
      process.exit(1);
    }

    console.log('\n‚úÖ Opinion stored in database');
    console.log('Stored content length:', storedOpinion.opinionMessage.content.length);

    if (storedOpinion.opinionMessage.content !== result.data.content) {
      console.error('\n‚ùå FAILED: Stored content does not match returned content!');
      process.exit(1);
    }

    console.log('\n‚úÖ ALL TESTS PASSED! üéâ');
    console.log('\nSecond Opinion feature is working correctly:');
    console.log('  ‚úì Content is generated by Ollama');
    console.log('  ‚úì Content is returned in API response');
    console.log('  ‚úì Content is stored in database');
    console.log('  ‚úì Content matches between API and database');
  } catch (error) {
    console.error('\n‚ùå TEST FAILED:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Run test
testSecondOpinion();
