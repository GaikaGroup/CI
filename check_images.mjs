import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

const sessionId = 'cmh1xm4da0059dufsrd06c0m0';

const session = await prisma.session.findUnique({
  where: { id: sessionId },
  include: {
    messages: {
      orderBy: { createdAt: 'asc' }
    }
  }
});

if (!session) {
  console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  await prisma.$disconnect();
  process.exit(1);
}

console.log(`\n‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${sessionId}`);
console.log(`üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${session.messages.length}`);

const messagesWithImages = session.messages.filter((m) => {
  try {
    const metadata = typeof m.metadata === 'string' ? JSON.parse(m.metadata) : m.metadata;
    return metadata?.images && metadata.images.length > 0;
  } catch {
    return false;
  }
});

console.log(`üñºÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${messagesWithImages.length}\n`);

if (messagesWithImages.length > 0) {
  messagesWithImages.forEach((msg, idx) => {
    const metadata = typeof msg.metadata === 'string' ? JSON.parse(msg.metadata) : msg.metadata;
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ ${idx + 1}:`);
    console.log(`   ID: ${msg.id}`);
    console.log(`   –¢–∏–ø: ${msg.type}`);
    console.log(`   –í—Ä–µ–º—è: ${msg.createdAt}`);
    console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${metadata.images.length}`);

    metadata.images.forEach((img, imgIdx) => {
      console.log(`\n   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imgIdx + 1}:`);
      if (img.url) {
        const isDataURL = img.url.startsWith('data:');
        const isHTTP = img.url.startsWith('http');
        console.log(
          `      –¢–∏–ø URL: ${isDataURL ? 'Data URL (base64)' : isHTTP ? 'HTTP URL' : '–î—Ä—É–≥–æ–µ'}`
        );
        console.log(`      –î–ª–∏–Ω–∞: ${img.url.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`      –ù–∞—á–∞–ª–æ: ${img.url.substring(0, 60)}...`);
      }
      console.log(`      OCR –¥–∞–Ω–Ω—ã–µ: ${img.ocrData ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      if (img.ocrData) {
        console.log(`      OCR —Ç–µ–∫—Å—Ç (100 —Å–∏–º–≤–æ–ª–æ–≤): ${img.ocrData.text?.substring(0, 100)}...`);
      }
    });
    console.log('');
  });

  console.log('\nüìä –ò—Ç–æ–≥:');
  console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –°–û–•–†–ê–ù–ï–ù–´ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
  console.log(`   üìç –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: –ø–æ–ª–µ metadata –≤ —Ç–∞–±–ª–∏—Ü–µ Message`);
  console.log(
    `   üíæ –§–æ—Ä–º–∞—Ç: ${messagesWithImages[0].metadata.images[0].url.startsWith('data:') ? 'Base64 Data URL' : 'HTTP URL'}`
  );
} else {
  console.log('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏ –ù–ï –ù–ê–ô–î–ï–ù–û');
}

await prisma.$disconnect();
